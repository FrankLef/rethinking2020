# Multivariate Linear Models {#multivariate}

```{r}
#| include: false
library(dplyr)
library(tidyr)
library(tidybayes)
library(rethinking)
library(brms)
library(skimr)
library(scales)
library(modelr)
library(ggplot2)
library(dagitty)
library(ggdag)
library(ggdist)
library(patchwork)
library(paletteer)
```

Some options to facilitate the computations

```{r}
#  For execution on a local, multicore CPU with excess RAM
options(mc.cores = parallel::detectCores())
#  To avoid recompilation of unchanged Stan programs
rstan_options(auto_write = TRUE)
```

The default theme used by `ggplot2`

```{r}
# The default theme used by ggplot2
ggplot2::theme_set(ggthemes::theme_tufte(base_size = 11, base_family = "serif", ticks = TRUE))
ggplot2::theme_update(title = element_text(color = "midnightblue"))
```

Some custom functions used in this following code

```{r}
# Convert widths to probabilities. Useful when plotting.
width2probs <- function(x, add = NULL) {
  stopifnot(is.finite(x),x >= 0.5, x <= 1)
  probs <- (1 - x) / 2
  probs <- c(probs, 1 - probs)
  if (!is.null(add)) probs <- c(probs, add)
  sort(unique(probs))
}
# test the function
stopifnot(all.equal(width2probs(c(0.89, 1), add = 0.5), c(0, 0.055, 0.5, 0.945, 1)))
```

As mentioned in the summary of chapter 4, from hereon, the `brms` package will be used instead of `rethinking`. In addition, we might change the `exponential(1)` prior for the `cauchy(0, 1)` when it improves the performance of the fit.

## Spurious association

Get the data and standardize the variables

```{r}
data("WaffleDivorce")
dataWaffle <- WaffleDivorce |>
  # standardize the variables
  mutate(A = scale(as.vector(MedianAgeMarriage)),
         M = scale(as.vector(Marriage)),
         D = scale(as.vector(Divorce)))
dataWaffle |>
  select(MedianAgeMarriage, Marriage, Divorce, A, M, D, South) |>
  skim() |>
  mutate(across(.cols = where(is.numeric), .fns = round, digits = 1))
```

and plot the data

```{r}
plot_waffles <- function(data, x_var = "WaffleHouses", y_var = "Divorce",
                         color_var = "South",
                         titles = list(title = "Waffle Houses",
                                     x = "Waffle Houses per million",
                                     y = "Divorce rate",
                                     color = "South")) {
  ggplot(data, aes(x = .data[[x_var]], y = .data[[y_var]])) +
    geom_point(aes(color = as.logical(.data[[color_var]]))) +
    scale_color_paletteer_d("fishualize::Bodianus_rufus", direction = -1) + 
    labs(title = titles$title, x = titles$x, y = titles$y, color = titles$color)
}
```

```{r}
plotWaffle <- lapply(X = c("MedianAgeMarriage", "Marriage", "WaffleHouses"),
            FUN = function(x) {
              plot_waffles(dataWaffle, x_var = x) +
                stat_smooth(method = "lm", fullrange = TRUE,
                            fill = "darkolivegreen", color = "darkgreen") +
                labs(x = x)
            })
wrap_plots(plotWaffle, guides = "collect") &
  theme(legend.position = "bottom")
```

```{r}
GGally::ggscatmat(dataWaffle, columns = c("A", "M", "D"))
```

The model for regressing the divorce rate $D$ on the median age $A$ is

$$
\begin{align*}
D_i &\sim \mathcal{N}(\mu_i, \sigma) \\
\mu_i &= \alpha + \beta_A \cdot A_i \\
\alpha &\sim \mathcal{N}(0, 0.2) \\
\beta_A &\sim \mathcal{N}(0, 0.5) \\
\sigma &\sim \mathcal{Exp}(1)
\end{align*}
$$

and the fit, **take note of the argument `sample_prior = TRUE`** which is important for the rest of the exercise

```{r ch05_fit05_01}
tictoc::tic(msg = sprintf("run time of %s, use the cache.", "70 secs."))
fit05_01 <- xfun::cache_rds({
  out <- brm(
    data = dataWaffle,
    formula = D ~ 1 + A,
    family = gaussian,
    prior = c(
      prior(normal(0, 0.2), class = Intercept),
      prior(normal(0, 0.5), class = b),
      prior(exponential(1), class = sigma)),
    iter = 2000, warmup = 1000, chains = 4,
    sample_prior = TRUE,
    core = detectCores(), seed = 5)
  out <- brms::add_criterion(out, criterion = c("waic", "loo"))
  },
  file = "ch05_fit05_01")
tictoc::toc()
```

and we can investigate the priors as follows

```{r}
prior05_01 <- brms::prior_draws(fit05_01)
```

get the fitted $\mu_i$ by using a sequence of median age marriage of length 30 from the `min(MedianAgeMarriage)` to `max(MedianAgeMarriage)`.

```{r}
lpred05_01 <- data.frame(
    A = seq_range(dataWaffle$A, n = 30, pretty = TRUE)) |>
    add_linpred_draws(fit05_01, ndraws = 500) |>
    mean_qi(.width = 0.89)
```

and plot them

```{r}
plot05_01 <- list()
plot05_01 <- within(plot05_01, {
  age <- ggplot(data = dataWaffle, mapping = aes(x = A, y = D)) +
  geom_smooth(data = lpred05_01,
              aes(y = .linpred, ymin = .lower, ymax = .upper),
              stat = "identity",
              fill = "olivedrab1", color = "olivedrab4", alpha = 1, size = 1/2) +
  geom_point(aes(color = as.logical(South))) +
  scale_x_continuous(breaks = scales::breaks_extended(n = 7),
                     labels = function(x) {
                       center <- mean(dataWaffle$MedianAgeMarriage)
                       scale <- sd(dataWaffle$MedianAgeMarriage)
                       scales::label_number(accuracy = 0.1)(x * scale + center)
                     }) +
  scale_y_continuous(breaks = scales::breaks_extended(n = 7),
                     labels = function(x) {
                       center <- mean(dataWaffle$Divorce) 
                       scale <- sd(dataWaffle$Divorce)
                       scales::label_number(accuracy = 0.1)(x * scale + center)
                     }) +
  scale_color_paletteer_d("calecopal::kelp1", direction = -1) +
  theme(legend.position = c(0.85, 0.85),
        title = element_text(color = "midnightblue")) +
  labs(title = "Divorce rate vs Median Marriage age",
       color = "South",
       x = "Median age of marriage", y = "Divorce rate")
})
# plot05_01
```

The model for regressing the divorce rate $D$ on the marriage rate $M$ is

$$
\begin{align*}
D_i &\sim \mathcal{N}(\mu_i, \sigma) \\
\mu_i &= \alpha + \beta_M \cdot M_i \\
\alpha &\sim \mathcal{N}(0, 0.2) \\
\beta_A &\sim \mathcal{N}(0, 0.5) \\
\sigma &\sim \mathcal{Exp}(1)
\end{align*}
$$

```{r ch05_fit05_02}
tictoc::tic(msg = sprintf("run time of %s, use the cache.", "80 secs."))
fit05_02 <- xfun::cache_rds({
  out <- brm(
    data = dataWaffle,
    formula = D ~ 1 + M,
    family = gaussian,
    prior = c(
      prior(normal(0, 0.2), class = Intercept),
      prior(normal(0, 0.5), class = b),
      prior(exponential(1), class = sigma)),
    iter = 2000, warmup = 1000, chains = 4,
    sample_prior = TRUE,
    core = detectCores(), seed = 5)
  out <- brms::add_criterion(out, criterion = c("waic", "loo"))
  },
  file = "ch05_fit05_02")
tictoc::toc()
```

```{r}
posterior_summary(fit05_02)
```

```{r}
lpred05_02 <- list()
lpred05_02 <- data.frame(
  M = seq_range(dataWaffle$M, n = 30, pretty = TRUE)) |>
  add_linpred_draws(fit05_02, ndraws = 500) |>
  mean_qi(.width = 0.89)
```

and plot them

```{r}
plot05_02 <- list()
plot05_02 <- within(plot05_02, {
  marriage <- ggplot(data = dataWaffle, mapping = aes(x = M, y = D)) +
  geom_smooth(data = lpred05_02,
              aes(y = .linpred, ymin = .lower, ymax = .upper),
              stat = "identity",
              fill = "springgreen1", color = "springgreen4", alpha = 1, size = 1/2) +
  geom_point(aes(color = as.logical(South))) +
  scale_x_continuous(breaks = scales::breaks_extended(n = 7),
                     labels = function(x) {
                       center <- mean(dataWaffle$Marriage)
                       scale <- sd(dataWaffle$Marriage)
                       scales::label_number(accuracy = 0.1)(x * scale + center)
                     }) +
  scale_y_continuous(breaks = scales::breaks_extended(n = 7),
                     labels = function(x) {
                       center <- mean(dataWaffle$Divorce) 
                       scale <- sd(dataWaffle$Divorce)
                       scales::label_number(accuracy = 0.1)(x * scale + center)
                     }) +
  scale_color_paletteer_d("calecopal::kelp1", direction = -1) +
  theme(legend.position = c(0.85, 0.85),
        title = element_text(color = "midnightblue")) +
  labs(title = "Divorce rate vs Marriage rate",
       color = "South",
       x = "Marriage rate", y = "Divorce rate")
})
# plot05_02$marriage
```

```{r}
plot05_01$age + plot05_02$marriage +
  plot_layout(guides = "collect") &
  theme(legend.position = "bottom")
```

### Think before you regress

```{r}
dagWaffle <- list()
dagWaffle <- within(dagWaffle, {
  coord <- data.frame(
    name = c("A", "D", "M"),
    x = c(1, 2, 3),
    y = c(2, 1, 2))
  
  dag1 <- ggdag::dagify(M ~ A,
                      D ~ A + M,
                      coords = coord)
  
  plot1 <- ggplot(dag1, aes(x = x, y = y, xend = xend, yend = yend)) +
    geom_dag_point(aes(color = name), size = 10) +
    geom_dag_text(color = "midnightblue") +
    geom_dag_edges(edge_color = "midnightblue") +
    scale_color_paletteer_d("calecopal::kelp1") +
    scale_x_continuous(NULL, breaks = NULL, expand = c(0.1, 0.1)) +
    scale_y_continuous(NULL, breaks = NULL, expand = c(0.1, 0.1)) +
    ggthemes::theme_solid(fill = "snow2") +
    theme(legend.position = "none")

  dag2 <- ggdag::dagify(M ~ A,
                      D ~ A,
                      coords = coord)
  
  plot2 <- ggplot(dag2, aes(x = x, y = y, xend = xend, yend = yend)) +
    geom_dag_point(aes(color = name), size = 10) +
    geom_dag_text(color = "midnightblue") +
    geom_dag_edges(edge_color = "midnightblue") +
    scale_color_paletteer_d("calecopal::kelp1") +
    scale_x_continuous(NULL, breaks = NULL, expand = c(0.1, 0.1)) +
    scale_y_continuous(NULL, breaks = NULL, expand = c(0.1, 0.1)) +
    ggthemes::theme_solid(fill = "snow2") +
    theme(legend.position = "none")})
```

```{r}
with(dagWaffle, {plot1 | plot2}) +
  plot_annotation(
    title = "Testable Implications of the Waffle Data"
  )
```

### Testable implications

```{r}
dag <- "dag{ D <- A -> M }"
dagitty::dagitty(dag) |>
  dagitty::impliedConditionalIndependencies()
```

```{r}
dag <- "dag{ D <- A -> M -> D }"
dagitty::dagitty(dag) |>
  dagitty::impliedConditionalIndependencies()
message("This returns NULL because there are no conditional independencies")
```

### Multiple regression notation

The model with median age and marriage rate, both standardized.

> The $+$ in the model can be interpreted as the divorce rate is a function of 
the marriage rate **OR** the median age of marriage

$$
\begin{align*}
D_i &\sim \mathcal{N}(\mu_i, \sigma) \\
\mu_i &= \alpha + \beta_M \cdot M_i + \beta_A \cdot A_i \\
\alpha &\sim \mathcal{N}(0, 0.2) \\
\beta_1 &\sim \mathcal{N}(0, 0.5) \\
\beta_2 &\sim \mathcal{N}(0, 0.5) \\
\sigma &\sim \mathcal{Exp}(0, 1)
\end{align*}
$$

### Approximating the posterior

```{r ch05_fit05_03}
tictoc::tic(msg = sprintf("run time of %s, use the cache.", "80 secs."))
fit05_03 <- xfun::cache_rds({
  out <- brm(
    data = dataWaffle,
    formula = D ~ 1 + M + A,
    family = gaussian,
    prior = c(
      prior(normal(0, 0.2), class = Intercept),
      prior(normal(0, 0.5), class = b, coef = "M"),
      prior(normal(0, 0.5), class = b, coef = "A"),
      prior(exponential(1), class = sigma)),
    iter = 2000, warmup = 1000, chains = 4,
    core = detectCores(), seed = 5)
  out <- brms::add_criterion(out, criterion = c("waic", "loo"))
  },
  file = "ch05_fit05_03")
tictoc::toc()
```

```{r}
posterior_summary(fit05_03)
```

```{r}
tidybayes::get_variables(fit05_03)
```

```{r}
fit05_03 |>
  gather_draws(b_Intercept, b_M, b_A, ndraws = 500) |>
  ggplot(aes(x = .value, y = .variable)) +
  stat_pointinterval(point_interval = mean_qi,
                     .width = 0.89,
                     fatten_point = 3,
                     size = 10,
                     color = "tan4") +
  labs(title = deparse1(fit05_03$formula$formula),
       x = NULL, y = NULL)
```

### Plotting multivariate posteriors

3 main plots are used

-   Predictor residual plots
-   Posterior prediction plots
-   Counterfactual plots

#### Predictor residual plots

##### Marriage rate residuals

We compute marriage rate in *terms of median age of marriage* which is the model

$$
\begin{align*}
M_i &\sim \mathcal{N}(\mu_i, \sigma) \\
\mu_i &= \alpha + \beta \cdot A_i \\
\alpha &\sim \mathcal{N}(0, 0.2) \\
\beta &\sim \mathcal{N}(0, 0.5) \\
\sigma &\sim \mathcal{Exp}(1)
\end{align*}
$$

fit this model

```{r ch05_fit05_04m}
tictoc::tic(msg = sprintf("run time of %s, use the cache.", "70 secs."))
fit05_04m <- xfun::cache_rds({brm(
  data = dataWaffle,
  formula = M ~ 1 + A,
  family = gaussian,
  prior = c(
    prior(normal(0, 0.2), class = Intercept),
    prior(normal(0, 0.5), class = b),
    prior(exponential(1), class = sigma)),
  iter = 2000, warmup = 100, chains = 4, core = detectCores(),
  seed = 5)
  },
  file = "ch05_fit05_04m")
tictoc::toc()
```

```{r}
summary(fit05_04m)
```

```{r}
lpred05_04m <- dataWaffle |>
  select(Loc, M, A) |>
  add_linpred_draws(fit05_04m, ndraws = 500) |>
  mean_qi()

plot05_04 <- list()
plot05_04 <- within(plot05_04, {
  marriage <- lpred05_04m |>
    ggplot(aes(x = A, y = M)) +
    geom_point() +
    geom_segment(aes(xend = A, yend = .linpred), size = 0.5, color = "green") +
    geom_line(aes(x = A, y = .linpred), color = "purple") +
    geom_text(aes(label = Loc), size = 3, color = "darkblue") +
    labs(x = "Median age of marriage (standardized)",
         y = "Marriage rate (standardized)")
})
```

##### Age of Marriage residuals

We compute age of marriage in *terms of rate of marriage* which is the model

$$
\begin{align*}
A_i &\sim \mathcal{N}(\mu_i, \sigma) \\
\mu_i &= \alpha + \beta \cdot M_i \\
\alpha &\sim \mathcal{N}(0, 0.2) \\
\beta &\sim \mathcal{N}(0, 0.5) \\
\sigma &\sim \mathcal{Exp}(1)
\end{align*}
$$

fit this model

```{r ch05_fit05_04a}
tictoc::tic(msg = sprintf("run time of %s, use the cache.", "70 secs."))
fit05_04a <- xfun::cache_rds({brm(
  data = dataWaffle,
  formula = A ~ 1 + M,
  family = gaussian,
  prior = c(
    prior(normal(0, 0.2), class = Intercept),
    prior(normal(0, 0.5), class = b),
    prior(exponential(1), class = sigma)),
  iter = 2000, warmup = 100, chains = 4, core = detectCores(),
  seed = 5)
  },
  file = "ch05_fit05_04a")
tictoc::toc()
```

```{r}
lpred05_04a <- dataWaffle |>
  select(Loc, M, A) |>
  add_linpred_draws(fit05_04a, ndraws = 500) |>
  mean_qi()

plot05_04 <- within(plot05_04, {
  age <- lpred05_04a |>
    ggplot(aes(x = M, y = A)) +
    geom_point() +
    geom_segment(aes(xend = M, yend = .linpred), size = 0.5, color = "orchid") +
    geom_line(aes(x = M, y = .linpred), color = "darkgoldenrod") +
    geom_text(aes(label = Loc), size = 3, color = "darkblue") +
    labs(x = "Marriage rate (standardized)",
         y = "Median age of marriage (standardized)")
  })
```

which gives us the 2 top plots of figure 5.4

```{r}
wrap_plots(plot05_04[c("marriage", "age")])
```

##### Using residuals as predictors

Now we use the residuals of the marriage rate to represent marriage **free of any influence by the median age of marriage**. We use the `residual_draws()` function to extract the residuals.

```{r}
res05_04m <- dataWaffle |>
  select(Loc, D, M, A) |>
  add_residual_draws(fit05_04m, ndraws = 500) |>
  ungroup() |>
  select(D, .residual) |>
  group_by(D) |>
  mean_qi() |>
  select(D, resM = .residual)
```

```{r ch05_fit05_04dm}
tictoc::tic(msg = sprintf("run time of %s, use the cache.", "60 secs."))
fit05_04dm <- xfun::cache_rds({brm(
  data = res05_04m,
  formula = D ~ 1 + resM,
  family = gaussian,
  prior = c(
    prior(normal(0, 0.5), class = Intercept),
    prior(normal(0, 0.5), class = b),
    prior(exponential(1), class = sigma)),
  iter = 2000, warmup = 100, chains = 4, core = detectCores(),
  seed = 5)
  },
  file = "ch05_fit05_04dm")
tictoc::toc()
```

```{r}
lpred_05_04dm <- res05_04m |>
  add_linpred_draws(fit05_04dm, ndraws = 500) |>
  median_qi(.width = 0.89) |>
  identity()

plot05_04 <- within(plot05_04, {
  marriage_res <- lpred_05_04dm |>
    ggplot(mapping = aes(x = resM, y = D)) +
    geom_point() +
    geom_smooth(mapping = aes(y = .linpred, ymin = .lower, ymax = .upper),
                stat = "identity", fill = "powderblue", color = "darkblue") +
    labs(x = "Marriage rate (standardized)",
         y = "Divorce rate (standardized)")
  })
```

```{r}
res05_04a <- dataWaffle |>
  select(Loc, D, M, A) |>
  add_residual_draws(fit05_04a, ndraws = 500) |>
  ungroup() |>
  select(D, .residual) |>
  group_by(D) |>
  mean_qi() |>
  select(D, resA = .residual)
```

```{r ch05_fit05_04da}
tictoc::tic(msg = sprintf("run time of %s, use the cache.", "70 secs."))
fit05_04da <- xfun::cache_rds({brm(
  data = res05_04a,
  formula = D ~ 1 + resA,
  family = gaussian,
  prior = c(
    prior(normal(0, 0.5), class = Intercept),
    prior(normal(0, 0.5), class = b),
    prior(exponential(1), class = sigma)),
  iter = 2000, warmup = 100, chains = 4, core = detectCores(),
  seed = 5)
  },
  file = "ch05_fit05_04da")
tictoc::toc()
```

```{r}
lpred_05_04da <- res05_04a |>
  add_linpred_draws(fit05_04da, ndraws = 500) |>
  median_qi(.width = 0.89) |>
  identity()

plot05_04 <- within(plot05_04, {
  age_res <- lpred_05_04da |>
    ggplot(mapping = aes(x = resA, y = D)) +
    geom_point() +
    geom_smooth(mapping = aes(y = .linpred, ymin = .lower, ymax = .upper),
                stat = "identity", fill = "powderblue", color = "darkblue") +
    labs(x = "Median age of marriage (standardized)",
         y = "Divorce rate (standardized)")
  })
```

which gives the bottom part of figure 5.1

```{r}
wrap_plots(plot05_04[c("marriage_res", "age_res")]) +
  plot_annotation("Fig 5.4: Divorce vs Residual marriage rate and median age of marriage")
```

We conclude that the marriage rate seems to have little impact on the divorce rate once we remove the effect of the median age of marriage.

#### Posterior prediction plots

The textbook mentions posterior predictions. So we use `add_epred_draws()` to get the expected predictions.

```{r}
epred05_03 <- dataWaffle |>
  add_epred_draws(fit05_03, ndraws = 500) |>
  mean_qi()
epred05_03

ggplot(data = epred05_03, aes(x = D, y = .epred)) +
  geom_abline(slope = 1, linetype = "dashed", color = "darkorchid") +
  geom_point(color = "firebrick4") +
  geom_linerange(aes(ymin = .lower, ymax = .upper), color = "firebrick3") +
  geom_text(aes(label = Loc), size = 3, color = "midnightblue") +
  labs(title = "Figure 5.5: Posterior Predictive (expected) Plot: Divorce rate",
       x = "observed divorce",
       y = "predicted divorce")
```

#### Counterfactual plots

We are using the same DAG as above

```{r}
dagWaffle$plot1
```

**IMPORTANT**: The full model implies 2 effects, $A$ on $M$ and $D$ and $A$ on $M$. In other words 2 structural equations are involved or expressed differently, 2 formulas in `brms`.

```{r}
d_model <- brms::bf(D ~ 1 + A + M)
m_model <- brms::bf(M ~ 1 + A)
```

The `set_rescor(FALSE)` indicates that we do not want `brms` to add the residual correlation between $D$ and $M$.

Also the argument `resp` is used to identify the response.

```{r ch05_fit05_03_A}
tictoc::tic(msg = sprintf("run time of %s, use the cache.", "60 secs."))
fit05_03_A <- xfun::cache_rds({brm(
  data = dataWaffle, 
  family = gaussian,
  d_model + m_model + set_rescor(FALSE),
      prior = c(prior(normal(0, 0.2), class = Intercept, resp = D),
                prior(normal(0, 0.5), class = b, resp = D),
                prior(exponential(1), class = sigma, resp = D),
                prior(normal(0, 0.2), class = Intercept, resp = M),
                prior(normal(0, 0.5), class = b, resp = M),
                prior(exponential(1), class = sigma, resp = M)),
      iter = 2000, warmup = 1000, chains = 4, cores = detectCores(),
      seed = 5)
  }, file = "ch05_fit05_03_A")
tictoc::toc()
```

```{r}
summary(fit05_03_A)
```

We manipulate $M$ $M=0$ and predicting $D$ with $A$ with this new counterfactual $M$.

```{r}
pred05_03_A <- list()
pred05_03_A$doA <- data.frame(
  A = seq_range(dataWaffle$A, n = 30, pretty = TRUE),
  M = 0) |>
  add_predicted_draws(fit05_03_A, ndraws = 500) |>
  mean_qi()
```

```{r}
glimpse(pred05_03_A$doA)
```

```{r}
plot05_03_A <- list()
plot05_03_A$doAonD <- pred05_03_A$doA |>
  filter(.category == "D") |>
  ggplot(aes(x = A, y = .prediction)) +
  geom_smooth(aes(ymin = .lower, ymax = .upper), stat = "identity",
              color = "indianred4", fill = "indianred1") +
  labs(title = "Total counterfactual effect of A on D",
       x = "Manipulated A", y = "Counterfactual D")
# plot05_03_A$doAonD
```

```{r}
plot05_03_A$doAonM <- pred05_03_A$doA |>
  filter(.category == "M") |>
  ggplot(aes(x = A, y = .prediction)) +
  geom_smooth(aes(ymin = .lower, ymax = .upper), stat = "identity",
              color = "darkorange4", fill = "darkorange1") +
  labs(title = "Total counterfactual effect of A on M",
       x = "Manipulated A", y = "Counterfactual M")
# plot05_03_A$doAonM
```

```{r }
#| fig-cap: Figure 5.6
plot05_03_A$doAonD + plot05_03_A$doAonM
```

The counterfactual effect of manipulating average rate effect $M$ on divorce rate $D$ is done as follows

```{r}
pred05_03_A$doM <- data.frame(
  M = seq_range(dataWaffle$M, n = 30, pretty = TRUE),
  A = 0) |>
  add_predicted_draws(fit05_03_A, ndraws = 500) |>
  mean_qi()
# glimpse(pred05_03_A$doM)
```

```{r}
#| fig-cap: Figure 5.7
plot05_03_A$doMonD <- pred05_03_A$doM |>
  filter(.category == "D") |>
  ggplot(aes(x = M, y = .prediction)) +
  geom_smooth(aes(ymin = .lower, ymax = .upper), stat = "identity",
              color = "khaki4", fill = "khaki1") +
  labs(title = "Total counterfactual effect of M on D",
       x = "Manipulated M", y = "Counterfactual D")
plot05_03_A$doMonD
```

## Masked relationship

Load data and look at the pair plot. We use `GGally::pairs()` which gives better information and formatting options.

But first, as mentioned on p. 136, we need to remove missing values which cause problems when plotting and in modeling.

```{r}
data(milk)
dataMilk <- milk |>
  as.data.frame() |>
  tidyr::drop_na() |>
  mutate(K = as.vector(scale(kcal.per.g)),
         N = as.vector(scale(neocortex.perc)),
         M = as.vector(scale(log(mass))))
skimr::skim(dataMilk)
# it should give us a dataframe with 17 rows
stopifnot(nrow(dataMilk) == 17)
# glimpse(dataMilk)
```

```{r}
GGally::ggpairs(dataMilk, columns = c("K", "N", "M")) +
  ggthemes::theme_fivethirtyeight()
```

### Model 5.5

$$
\begin{align*}
K &\sim \mathcal{N}(\mu_i, \sigma) \\
\mu_i &= \alpha + \beta_N \cdot N_i \\
\alpha &\sim \mathcal{N}(0, 0.2) \\
\beta_N &\sim \mathcal{N}(0, 0.5) \\
\sigma &\sim \mathcal{Exp}(1)
\end{align*}
$$

and the fit is

```{r ch05_fit05_05}
tictoc::tic(msg = sprintf("run time of %s, use the cache.", "60 secs."))
fit05_05 <- xfun::cache_rds({brm(
  data = dataMilk,
  formula = K ~ 1 + N,
  family = gaussian,
  prior = c(
    prior(normal(0, 0.2), class = Intercept),
    prior(normal(0, 0.5), class = b),
    prior(exponential(1), class = sigma)
  ),
  iter = 2000, warmup = 1000, chains = 4, cores = detectCores(),
  seed = 5)
  }, file = "ch05_fit05_05")
tictoc::toc()
```

```{r}
print(fit05_05, digits = 3)
```

and show the coefficient plot

```{r}
tidybayes::get_variables(fit05_05)
```

```{r}
post05_05 <- fit05_05 |>
  tidybayes::gather_draws(b_Intercept, b_N, sigma)
```

```{r}
# source: https://cran.r-project.org/web/packages/ggdist/vignettes/slabinterval.html
plot05_05 <- post05_05 |>
    ggplot(aes(x = .value, y = .variable)) +
    stat_halfeye(aes(fill = after_stat(level)), .width = c(0.89, 1)) +
    scale_x_continuous(breaks = scales::breaks_extended(n = 7),
                       labels = scales::label_number(accuracy = 0.1)) +
    scale_fill_paletteer_d(palette = "calecopal::dudleya",
                           na.translate = FALSE) +
    theme(legend.position = "none") +
    labs(title = "Model 5.5: Posterior Distribution of Parameters", x = NULL, y = NULL)
plot05_05
```

fit for different confidence intervals

```{r}
lpred05_05 <- dataMilk |>
  add_linpred_draws(fit05_05, ndraws = 500)
# glimpse(lpred05_05)
```

```{r}
plot05_05 <- lpred05_05 |>
  ggplot(aes(x = N, y = .linpred)) +
  stat_lineribbon(color = "purple") +
  scale_fill_paletteer_d("ggthemes::Classic_Cyclic") +
  coord_cartesian(xlim = c(-2, 1.5), ylim = c(-2, 2)) +
  theme(legend.position = "none") +
  labs(x = "neocortex.perc (standardized)", y = "kcal.per.g (standardized)")
# plot05_05
```

### Model 5.6

$$
\begin{align*}
K &\sim \mathcal{N}(\mu_i, \sigma) \\
\mu_i &= \alpha + \beta_M \cdot M_i \\
\alpha &\sim \mathcal{N}(0, 0.2) \\
\beta_N &\sim \mathcal{N}(0, 0.5) \\
\sigma &\sim \mathcal{Exp}(1)
\end{align*}
$$

and the fit is

```{r ch05_fit05_06}
tictoc::tic(msg = sprintf("run time of %s, use the cache.", "60 secs."))
fit05_06 <- xfun::cache_rds({brm(
  data = dataMilk,
  formula = K ~ 1 + M,
  family = gaussian,
  prior = c(
    prior(normal(0, 0.2), class = Intercept),
    prior(normal(0, 0.5), class = b),
    prior(exponential(1), class = sigma)),
  iter = 2000, warmup = 1000, chains = 4, cores = detectCores(),
  seed = 5)
  }, file = "ch05_fit05_06")
tictoc::toc()
```

```{r}
print(fit05_06, digits = 3)
```

and the plot for the kilo vs mass

```{r}
tidybayes::get_variables(fit05_06)
```

```{r}
lpred05_06 <- dataMilk |>
  select(K, M) |>
  add_linpred_draws(fit05_06, ndraws = 500) |>
  mean_qi(.width = 0.89)
glimpse(lpred05_06)
```

```{r}
plot05_06 <- ggplot(dataMilk, aes(x = M, y = K)) +
  geom_point() +
  geom_smooth(lpred05_06, 
              mapping = aes(x = M, y = .linpred, ymin = .lower, ymax = .upper),
              stat = "identity", inherit.aes = FALSE,
              color = "darkslategray4", fill = "darkslategray1") +
  coord_cartesian(xlim = c(-1.9, 1.9), ylim = c(-2, 2)) +
  theme(legend.position = c(0.8, 0.2)) +
  labs(x = "mass (log)", y = "kcal.per.g (standardized)")
# plot05_06
```

### Model 5.7

we now add neocortex and log mass together to see their mutual effect,

$$
\begin{align*}
K_i &\sim \mathcal{N}(\mu_i, \sigma) \\
\mu_i &= \alpha + \beta_N \cdot N_i + \beta_M \cdot log(M_i) \\
\alpha &\sim \mathcal{N}(0, 0.2) \\
\beta_N &\sim \mathcal{N}(0, 0.5) \\
\beta_M &\sim \mathcal{N}(0, 0.5) \\
\sigma &\sim \mathcal{Exp}(1)
\end{align*}
$$

and the fit is

```{r ch05_fit05_07}
tictoc::tic(msg = sprintf("run time of %s, use the cache.", "80 secs."))
fit05_07 <- xfun::cache_rds({brm(
  data = dataMilk,
  formula = K ~ 1 + N + M,
  family = gaussian,
  prior = c(
    prior(normal(0, 0.2), class = Intercept),
    prior(normal(0, 0.5), class = b),
    prior(cauchy(0, 0.5), class = sigma)
  ),
  iter = 2000, warmup = 1000, chains = 4, cores = detectCores(),
  seed = 5)
  }, file = "ch05_fit05_07")
tictoc::toc()
```

```{r}
print(fit05_07, digits = 3)
```

get the counterfactual data **holding** $M = 0$

```{r}
lpred05_07 <- list()
lpred05_07 <- within(lpred05_07, {
  doM <- dataMilk |>
    select(K, M, N) |>
    mutate(M = 0) |>
    add_linpred_draws(fit05_07, ndraws = 500) |>
    mean_qi(.width = 0.89)
  
  doN <- dataMilk |>
    select(K, M, N) |>
    mutate(N = 0) |>
    add_linpred_draws(fit05_07, ndraws = 500) |>
    mean_qi(.width = 0.89)
})
glimpse(lpred05_07)
```

```{r}
plot05_07 <- list()
plot05_07 <- within(plot05_07, {
  doM <- ggplot(dataMilk, aes(x = N, y = K)) +
    geom_point() +
    geom_smooth(lpred05_07$doM, 
                mapping = aes(x = N, y = .linpred, ymin = .lower, ymax = .upper),
                stat = "identity", inherit.aes = FALSE,
              color = "chartreuse4", fill = "chartreuse1") +
    coord_cartesian(xlim = c(-1.9, 1.9), ylim = c(-2, 2)) +
    theme(legend.position = c(0.8, 0.2)) +
    labs(title = "Counterfactual holding M = 0",
         x = "neocortex.perc (standardized)", y = "kcal.per.g (standardized)")
  
  doN <- ggplot(dataMilk, aes(x = M, y = K)) +
  geom_point() +
  geom_smooth(lpred05_07$doN, 
              mapping = aes(x = M, y = .linpred, ymin = .lower, ymax = .upper),
              stat = "identity", inherit.aes = FALSE,
              color = "burlywood4", fill = "burlywood1") +
  coord_cartesian(xlim = c(-1.9, 1.9), ylim = c(-2, 2)) +
  theme(legend.position = c(0.8, 0.2)) +
  labs(title = "Counterfactual holding N = 0",
       x = "mass (log)", y = "kcal.per.g (standardized)")
})
```

```{r}
#| fig-cap: Figure 5.9
((plot05_05 | plot05_06) / (plot05_07$doM | plot05_07$doN)) +
  plot_annotation(title = "Milk Energy and Neocortex Among Primates")
```

## Categorical variables

### Binary categories

Load data

```{r}
data("Howell1")
dataHowel <- Howell1 |>
  mutate(sex = factor(male))
# glimpse(dataHowel)
```

the model

$$
\begin{align*}
h_i &\sim \mathcal{N}(\mu_i, \sigma) \\
\mu_i &= \alpha_{sex[i]} \\
\alpha &\sim \mathcal{N}(178, 20) \\
\beta_m &\sim \mathcal{N}(0, 10) \\
\sigma &\sim \mathcal{Exp}(1)
\end{align*}
$$

```{r ch05_fit05_08}
tictoc::tic(msg = sprintf("run time of %s, use the cache.", "80 secs."))
fit05_08 <- xfun::cache_rds({brm(
  data = dataHowel,
  formula = height ~ 0 + sex,
  family = gaussian,
  prior = c(
    prior(normal(178, 20), class = b),
    prior(exponential(1), class = sigma)),
  iter = 2000, warmup = 1000, chains = 4, cores = detectCores(),
  seed = 5)
  }, file = "ch05_fit05_08")
tictoc::toc()
```

```{r}
summary(fit05_08)
```

> Read the important comment in section 5.3.1 when using $\alpha$. $\alpha$ now represents the average of women and the male heights is more variable because it relates to 2 parameters instead of 1.

### Many categories

> See the overthinking box in section 5.3.2 on how to reparametrize. Very nice.

Load data, standardize and make sure *clade* is a factor.

> With `brms` there is no need to create the contrasts. We simply make sure that `*clade* is a factor.`brms\` will create the contrasts by itself.

```{r}
data("milk")
dataMilk <- milk |> 
  mutate(K = as.vector(scale(kcal.per.g)))
# skimr::skim(d)
stopifnot(is.factor(dataMilk$clade))
```

the model

$$
\begin{align*}
K_i &\sim \mathcal{N}(\mu_i, \sigma) \\
\mu_i &= \alpha_{clade[i]} \\
\alpha_j &\sim \mathcal{N}(0, 0.5) \\
\sigma &\sim \mathcal{Exp}(1)
\end{align*}
$$

```{r ch05_fit05_09}
tictoc::tic(msg = sprintf("run time of %s, use the cache.", "80 secs."))
fit05_09 <- xfun::cache_rds({brm(
  data = dataMilk,
  formula = K ~ 0 + clade,
  family = gaussian,
  prior = c(
    prior(normal(0, 0.5), class = b),
    prior(exponential(1), class = sigma)),
  iter = 2000, warmup = 1000, chains = 4, cores = detectCores(),
  seed = 5)
  }, file = "ch05_fit05_09")
tictoc::toc()
```

```{r}
summary(fit05_09)
```

```{r}
tidybayes::get_variables(fit05_09)
```

and plot the result

```{r}
tidybayes::gather_draws(fit05_09, b_cladeApe, b_cladeNewWorldMonkey, 
                        b_cladeOldWorldMonkey, b_cladeStrepsirrhine) |>
  mean_hdi(.width = 0.89) |>
  ggplot(aes(x = .value, xmin = .lower, xmax = .upper, y = .variable)) +
  geom_vline(xintercept = 0, colour = "darkgoldenrod") +
  geom_pointinterval(fatten_point = 2.5, color = "yellowgreen", size = 5) +
  theme(panel.grid.major.y = element_line(linetype = "dotted", linewidth = 1)) +
  labs(title = "Expected kcal by clade with 89% CI", x = "kcal (std)", y = NULL)
```

## Other ways to modify categorical variables

See @kurtz2020b

## Summary
